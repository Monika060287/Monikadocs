
Set(
    ShowLoader,
    true
);
Refresh(IWH_STGP_Request_Details);
Refresh(IWH_STGP_Request_Details);
ClearCollect(
    col_STGP_Part_Details,ShowColumns(
    IWH_STGP_Request_Details,GP_ShipValue,GP_NetPrice,GP_PartPrice,Part_Number,GPQuantity,IWH_STGP_RequestNo,STGP_Part_Owner,Part_Description,IWH_Stand_Alone_MM_Details,Bonded_or_Not,STGPPart_SerialNo,GP_Currency,STGP_ExchangeRate,STGP_PartType,STGP_Return_Quantity,STGPPart_Weight,STGP_Part_Volume,CIF_Value,'GP_BondedNo.',GP_BondedDate,STGP_Comment,GP_PartWeightType,Foreign_Currency_Value,STGP_TypeofImport,STGP_HAWBNo,STGP_UOM,'Created On',GP_STPI_Import_Appr_No,GP_STPI_Import_Appr_Dt,GP_BOE_No,GP_BOEDate,GP_DutyForgone,STGP_PartRevision)
);

Set(
    VarRequestorUpdate,
    false
);
Reset(tglInwardEntryShowRequests);
Reset(txtSTGPSearch);
Refresh(IWH_STGP_Requests);
//Refresh(IWH_STGP_Request_Details);
Refresh(IWH_STGP_Shipment_Details);
/*ClearCollect(
    col_STGP_Part_Details,
    IWH_STGP_Request_Details
);*/
UpdateContext({lclRequests: "My"});
Set(
    varInwardEntryCurrentPage,
    1
);
//Refresh(IWH_STGP_Request_Details);
//ClearCollect(col_STGP_Part_Details,
//IWH_STGP_Request_Details);
Set(
    varSTGPCount,
    If(
        varLoggedInUserGroup = "Logistic",
        CountRows(
            Filter(
                col_STGP_Part_Details,
                 IWH_STGP_RequestNo.STGP_Status = IWH_STGP_Status.'InProgress-With Logistics team'
                ||IWH_STGP_RequestNo.STGP_Status = IWH_STGP_Status.'Return Pending'||IWH_STGP_RequestNo.STGP_Status =IWH_STGP_Status.'GP Partial Return'
            )
        ),
        varLoggedInUserGroup = "GISITSD",
        CountRows(
            Filter(
                col_STGP_Part_Details,
                IWH_STGP_RequestNo.STGP_Status = IWH_STGP_Status.'InProgress-With GIS IT SD Team'
            )
        ),
        varLoggedInUserGroup = "Finance",
        CountRows(
            Filter(
                col_STGP_Part_Details,
                IWH_STGP_RequestNo.STGP_Status = IWH_STGP_Status.'InProgress-With Finance Team' || IWH_STGP_RequestNo.STGP_Status = IWH_STGP_Status.'InProgress-With Finance & IMS Team'
            )
        ),
        varLoggedInUserGroup = "Buyer",
        CountRows(
            Filter(
                col_STGP_Part_Details,
                IWH_STGP_RequestNo.STGP_Status = IWH_STGP_Status.'InProgress-With IMS Team' || IWH_STGP_RequestNo.STGP_Status = IWH_STGP_Status.'InProgress-With Finance & IMS Team'
            )
        ),
          // Commented for  Receiving team -Monika
        /*varLoggedInUserGroup = "BTPSecurity",
        CountRows(
            Filter(
                col_STGP_Part_Details,
                IWH_STGP_RequestNo.STGP_Status = IWH_STGP_Status.'InProgress-With BTP Security Team'
            )
        ),*/
        varLoggedInUserGroup = "Requestor",
        CountRows(
            Filter(
                col_STGP_Part_Details,
                IWH_STGP_RequestNo.STGP_Status = IWH_STGP_Status.'InProgress-With Requestor' ||IWH_STGP_RequestNo.'Created By'.'Full Name' = User().FullName
            )
        ),
        varLoggedInUserGroup = "Facility",
        CountRows(
            Filter(
                col_STGP_Part_Details,
                IWH_STGP_RequestNo.STGP_Status = IWH_STGP_Status.'InProgress-With Facility Manager'
            )
        ),
          //Added inprogress with Receiving team -Monika
         varLoggedInUserGroup = "ReceivingTeam",
        CountRows(
            Filter(
                col_STGP_Part_Details,
                IWH_STGP_RequestNo.STGP_Status = IWH_STGP_Status.'Return Pending'||IWH_STGP_RequestNo.STGP_Status =IWH_STGP_Status.'GP Partial Return'||IWH_STGP_RequestNo.STGP_Status =IWH_STGP_Status.'InProgress-With Receiving Team'
            )
        ),
        //CountRows(col_STGP_Part_Details)
        CountIf(col_STGP_Part_Details,true)
    )
);
Set(
    ShowLoader,
    false
);
///////////////button gatepas 

Set(
    ShowLoader,
    true
);
Set(ApprovevisibilityCG,true);
//Set(varGenGatePass, true);
/*Set(FlowResult,If(IWH_STGP_Gatepass_Template.Run(varSTGPRequest.IWH_STGP_RequestNo.STGP_Request_Number).success="true",Notify("GatePass Created Successfully"),Notify("There is Error while creating the Gatepass")));*/


Set(
    FlowResult,
    If(
        IWH_STGP_GatePass_TemplateV2.Run(varSTGPRequest.IWH_STGP_RequestNo.STGP_Request_Number).success = "true",true,false
       
    )
);
Refresh(IWH_Process_Documents);
ClearCollect(
    colShowAttachment,
    Filter(
        IWH_Process_Documents,
        ProcessID = varSTGPRequest.IWH_STGP_RequestNo.STGP_Request_Number && Type_Of_Document = IWH_Type_Of_Document.'Standalone Request Invoices'
    )
);
IfError(
Patch(
                IWH_AuditLogs,
                Defaults(IWH_AuditLogs),
                {
                    Remarks: "GatePass Genarated",
                    Process_ID: varSTGPRequest.IWH_STGP_RequestNo.STGP_Request_Number,
                    Process_Type: IWH_Process_Type.'Stand Alone Gate Pass',
                    Update:varSTGPRequest.IWH_STGP_RequestNo.STGP_Request_Number
                }
            );

             ,
    Notify(
        "ErrorMessage: " & FirstError.Message & " ErrorKind: " & FirstError.Kind,
        NotificationType.Error
    );
    Patch(
        'Error Logs',
        Defaults('Error Logs'),
        {
            Action: "Hand it to requestor/DirectCheckin",
            App: "IWH Standalone gatepass",
            Control: FirstError.Source,
            Component: "Screen:Escalation Edit Screen",
            Message: FirstError.Message,
            Name: "Error in returnable items at " & Now(),
            Property: FirstError.Source,
            RawErrorInfo: FirstError.Message,
            Timestamp: Now(),
            User: User().Email,
            Origin: Origin.SQL,
            Kind: Switch(
                FirstError.Kind,
                0,
                Kind.None,
                1,
                Kind.Sync,
                2,
                Kind.MissingRequired,
                3,
                Kind.CreatePermission,
                4,
                Kind.EditPermissions,
                5,
                Kind.DeletePermissions,
                6,
                Kind.Conflict,
                7,
                Kind.NotFound,
                8,
                Kind.ConstraintViolated,
                9,
                Kind.GeneratedValue,
                10,
                Kind.ReadOnlyValue,
                11,
                Kind.Validation,
                12,
                Kind.Unknown,
                13,
                Kind.Div0,
                14,
                Kind.BadLanguageCode,
                15,
                Kind.BadRegex,
                16,
                Kind.InvalidFunctionUsage,
                17,
                Kind.FileNotFound,
                18,
                Kind.AnalysisError,
                19,
                Kind.ReadPermission,
                20,
                Kind.NotSupported,
                21,
                Kind.InsufficientMemory,
                22,
                Kind.QuotaExceeded,
                23,
                Kind.Network,
                24,
                Kind.Numeric,
                Kind.Unknown
            )
        }
    )
);

Set(
    ShowLoader,
    false
);
//Set(varGenGatePass, true);
If(
    FlowResult = true,
    Notify("Gatepass generated Successfully",NotificationType.Success),
    Notify(" There is failure in generating GatePass",NotificationType.Error)
);
